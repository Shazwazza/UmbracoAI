@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using Umbraco.Cms.Core.Models.PublishedContent
@{
    // Get all blog posts
    var blogCollection = Model;
    var allBlogPosts = blogCollection.Children().Where(x => x.IsVisible());
    
    // Collect all tags with their counts
    var tagCounts = new Dictionary<string, int>();
    
    foreach (var post in allBlogPosts)
    {
        if (post.HasValue("tags"))
        {
            var tags = post.Value<IEnumerable<string>>("tags");
            if (tags != null)
            {
                foreach (var tag in tags)
                {
                    if (!string.IsNullOrWhiteSpace(tag))
                    {
                        if (tagCounts.ContainsKey(tag))
                        {
                            tagCounts[tag]++;
                        }
                        else
                        {
                            tagCounts[tag] = 1;
                        }
                    }
                }
            }
        }
    }
    
    // Sort tags alphabetically
    var sortedTags = tagCounts.OrderBy(x => x.Key).ToList();
    
    // Calculate min and max counts for sizing
    var minCount = sortedTags.Any() ? sortedTags.Min(x => x.Value) : 0;
    var maxCount = sortedTags.Any() ? sortedTags.Max(x => x.Value) : 0;
    
    // Helper function to calculate tag size class
    string GetTagSizeClass(int count)
    {
        if (maxCount == minCount) return "tag-medium";
        
        var range = maxCount - minCount;
        var normalized = (double)(count - minCount) / range;
        
        if (normalized >= 0.75) return "tag-largest";
        if (normalized >= 0.5) return "tag-large";
        if (normalized >= 0.25) return "tag-medium";
        return "tag-small";
    }
}

@if (sortedTags.Any())
{
    <div class="tag-cloud">
        <h3 class="tag-cloud-title">Popular Tags</h3>
        <div class="tag-cloud-container">
            @foreach (var tag in sortedTags)
            {
                var sizeClass = GetTagSizeClass(tag.Value);
                <span class="tag @sizeClass" title="@tag.Value post@(tag.Value != 1 ? "s" : "")">
                    @tag.Key
                    <span class="tag-count">(@tag.Value)</span>
                </span>
            }
        </div>
    </div>
}